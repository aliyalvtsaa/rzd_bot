from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.methods.edit_message_text import EditMessageText
from aiogram.fsm.context import FSMContext
import asyncio
from bson import ObjectId

from keyboards import get_trains
from keyboards import get_tracks
from keyboards import confirmation_keyboard
from keyboards import process_keyboard
from rzd_parse_first_time import understand_user
from rzd_parse_first_time import create_rzd_url
from rzd_parse_first_time import handle_request
from helpers_for_user_understanding import create_message
from mongodb_connector import MongoDBConnector

from config import uri


db_name = "user_data"
mongo_connector = MongoDBConnector(uri, db_name)
router=Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –ø–æ–µ–∑–¥!‚ô•\n–û–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ\n‚è©–æ—Ç–∫—É–¥–∞\n‚è™–∫—É–¥–∞\nüìÜ–∫–æ–≥–¥–∞\nüöÇ–∫–∞–∫–∏–º –∫–ª–∞—Å—Å–æ–º\nüíµ–ø–æ –∫–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å!)\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–ò—â—É –±–∏–ª–µ—Ç—ã –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –ö–∞–∑–∞–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–æ 5 —Ç—ã—Å—è—á\n–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–µ–∑–¥–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–∏–ª–µ—Ç–æ–≤üëÄ')

@router.message(F.text == '–ù–µ—Ç')
async def tell_user(message: Message):
    await message.answer('–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –∑–∞–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑:)')
    
@router.message(F.text == '–î–∞')
async def go(message: Message, state: FSMContext):
    our_message = await message.answer("–ò—â–µ–º –ø–æ–µ–∑–¥–∞... üöÇüöÇüöÇ")
    await asyncio.sleep(3)
    await our_message.edit_text("–°–∫–æ—Ä–æ –Ω–∞–π–¥–µ–º! ‚åõ")
    user_wish = await state.get_data()
    url, train_classes, max_price = create_rzd_url(user_wish['response'])
    trains = await handle_request(url, train_classes, max_price)
    if trains:
        trains_markup = await get_trains(trains)
        chat_id=message.chat.id
        await state.update_data(chat_id=chat_id, url=url, train_classes=train_classes, max_price=max_price)
        await our_message.edit_text(f'–ü–æ–ª—É—á–∏–ª–æ—Å—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', reply_markup=trains_markup)
    else:
        await our_message.edit_text(f'–ö–∞–∂–µ—Ç—Å—è, –Ω–∞ –≤—Å–µ –ø–æ–µ–∑–¥–∞ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–∏–ª–µ—Ç—ãüöÇ')
        
@router.message(F.text == '–ù–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ')
async def new_track(message: Message):
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—ÅüëÄ')

@router.message(F.text == '–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ')
async def cancel_track(message: Message):
    chat_id=message.chat.id
    cancel_markup = await get_tracks(chat_id)
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã:', reply_markup=cancel_markup)
      
@router.message()
async def ask_user(message: Message, state: FSMContext):
    response, No_date=understand_user(message.text)
    if not all(key in response for key in ['city_from', 'city_to']) or No_date:
        await message.answer('–ö–∞–∂–µ—Ç—Å—è, —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç:\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ –∑–∞–ø—Ä–æ—Å–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è, –∞ —Ç–∞–∫–∂–µ –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è')
    else:
        message_for_user, message_for_cancelling = create_message(response)
        await message.answer(message_for_user, reply_markup=confirmation_keyboard)
        await state.update_data(response=response, message_for_cancelling=message_for_cancelling)
        
@router.callback_query(F.data)
async def train_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data=='final_choice':
        await callback.message.answer(f'–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ –Ω–∞ —ç—Ç–∏ –ø–æ–µ–∑–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–∏–ª–µ—Ç—ã, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ‚ú®', reply_markup=process_keyboard)
    elif callback.data.isalnum():
        object_id = ObjectId(callback.data)
        mongo_connector = MongoDBConnector(uri, db_name)
        record = mongo_connector.get_record_by_id(object_id)
        message_for_cancelling = record.get('message_for_cancelling')
        mongo_connector.delete_record_by_id(object_id)
        await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ!) –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ "{message_for_cancelling}" —É–¥–∞–ª–µ–Ω–æ')
    else:
        mongo_connector = MongoDBConnector(uri, db_name)
        train_time=callback.data
        user_data = await state.get_data()
        mongo_connector.insert_or_update_user_data(user_data, train_time)
        await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–µ–∑–¥ –Ω–∞ {train_time}')

