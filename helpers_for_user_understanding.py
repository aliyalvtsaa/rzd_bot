import json
import Levenshtein
from datetime import datetime, timedelta

def get_date(day):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É 'day' –≤ –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ '–î–î.–ú–ú.–ì–ì–ì–ì'.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫ –¥–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è ('1' –¥–ª—è –∑–∞–≤—Ç—Ä–∞), —Ç–∞–∫ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã ('–î–î.–ú–ú').
    
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 12.12, –∞ –º—ã –Ω–∞ —Å–∞–π—Ç –†–ñ–î –æ—Ç–ø—Ä–∞–≤–∏–º 12.12.2023!
    –ê –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç 02.01, –ø–æ–π–º–µ–º —á—Ç–æ —ç—Ç–æ 02.01.2024! 
    """
    current_date = datetime.now()
    current_year = current_date.year

    if day.isdigit():
        day_offset = int(day)
        target_date = current_date + timedelta(days=day_offset)
    else:
        target_date = datetime.strptime(f"{day}.{current_year}", "%d.%m.%Y")
        if target_date < current_date:
            target_date = datetime.strptime(f"{day}.{current_year + 1}", "%d.%m.%Y")

    return target_date.strftime("%d.%m.%Y")

def find_station_and_code(city_name, file_path='stations.json'):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—É—é –ø–æ—Ö–æ–∂—É—é —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    –ù–∞–ø—Ä–∏–º–µ—Ä –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫ - '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫ –ì–û–†–û–î', –∫–æ–¥ 2010400. –•–æ—Ç–∏—Ç–µ –≤ –ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫?))
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω—Ü–∏—é –∏ –µ–µ –∫–æ–¥.
    """

    with open(file_path, 'r', encoding='utf-8') as file:
        stations_dict = json.load(file)
    closest_station = None
    closest_distance = float('inf')
    for station in stations_dict.keys():
        distance = Levenshtein.distance(city_name.lower(), station.lower())
        if distance < closest_distance:
            closest_distance = distance
            closest_station = station

    return closest_station, stations_dict[closest_station]

def create_message(response):
    message = f"–í–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å\nüìç–∏–∑ –≥–æ—Ä–æ–¥–∞ {response['city_from']}\nüìç–≤ –≥–æ—Ä–æ–¥ {response['city_to']}\n üìÖ{response['day']}"
    if 'train_class' in response and response['train_class']:
        message += f"\nüöÇ–∫–ª–∞—Å—Å–∞–º–∏ {response['train_class']}"
    if 'price' in response and response['price']:
        message += f"\nüíµ–¥–æ {response['price']} —Ä—É–±–ª–µ–π"
    message += "?"
    message_for_cancelling = f"–ò–∑ –≥–æ—Ä–æ–¥–∞ {response['city_from']} –≤ –≥–æ—Ä–æ–¥ {response['city_to']} {response['day']} "
    if 'train_class' in response and response['train_class']:
        message_for_cancelling += f"–∫–ª–∞—Å—Å–∞–º–∏ {response['train_class']} "
    if 'price' in response and response['price']:
        message_for_cancelling += f"üíµ–¥–æ {response['price']} —Ä—É–±–ª–µ–π"
    return message, message_for_cancelling